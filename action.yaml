name: "Deutschland Generator Action"
description: "Generates a Python client library based on a remote OpenAPI specification for use in the deutschland package"
branding:
  icon: target
  color: green

inputs:
  openapi-uri:
    description: "The URI to the OpenAPI document to generate a client library for"
    required: true
  commit-to-git:
    description: "Should the generated code be added to git"
    required: false
    default: false
  upload-to-pypi:
    description: "Should package be uploaded to pypi"
    required: false
    default: false
  upload-to-testpypi:
    description: "Should package be uploaded to testpypi"
    required: false
    default: false
  pypi-token:
    description: "Token to upload package to pypi"
    required: false
    default: 'undefined'
  testpypi-token:
    description: "Token to upload package to testpypi"
    required: false
    default: 'undefined'
  python-version:
    description: "Python version to run on"
    required: true
    default: 3.7


runs:
  using: composite
  steps:
    # Print params of invocation
    - name: "Print params of invocation for book keeping"
      run: |
        echo "OpenAPI URI:" ${{ inputs.openapi-uri }}
        echo "Upload-to-pypi:" ${{ inputs.upload-to-pypi == 'true' }}
        echo "Upload-to-testpypi:" ${{ inputs.upload-to-testpypi == 'true'}}
        echo "Pypi Token:" ${{ inputs.pypi-token }} | head -c14
        echo -e "\nTestPypi Token:" ${{ inputs.testpypi-token }} | head -c18
        echo -e "\nPython Version:" ${{ inputs.python-version }}
      shell: bash


    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: "Checkout"
      uses: actions/checkout@v2

    - name: "setup python"
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: "Clean up existing generated code"
      run: |
        sudo rm -rf ${{ github.workspace }}/python-client
      shell: bash

    - name: "Download latest OpenAPI spec"
      run: curl ${{ inputs.openapi-uri }} > openapi.yaml

    - name: "Copy deutschland templates into workspace if it not already exists"
      run: |
        cp -rn ${{ github.action_path }}/deutschland_templates ${{ github.workspace }}
        ls ${{ github.workspace }}
      shell: bash

    - name: "Generate Python Client"
      uses: openapi-generators/openapitools-generator-action@v1
      with:
        generator: python
        openapi-file: openapi.yaml
        config-file: generator_config.yaml
        generator-tag: v6.1.0

    - name: "Print dir after generation"
      run: |
        echo "======================== Github Workspace ===================================="
        ls ${{ github.workspace }}
        echo "======================== Python Client ===================================="
        ls ${{ github.workspace }}/python-client
      shell: bash

    - name: "execute py script" # run the run.py to get the latest data
      run: |
        python ${{ github.workspace }}/python-client/rename_generated_code.py
      shell: bash

    - name: "generate sphinx-documentation"
      run: |
        pip install sphinx m2r2
        python ${{ github.workspace }}/python-client/create_doc.py
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: "documentation"
        path: ${{ github.workspace }}/python-client/sphinx-docs/_build # or path/to/artifact

    - name: "Delete generated sphinx doc after upload and all files which are not needed"
      run: |
        echo "======================== Remove not needed files ===================================="
        rm -rf ${{ github.workspace }}/python-client/sphinx-docs/_build
        rm -rf ${{ github.workspace }}/python-client/.gitignore
        rm -rf ${{ github.workspace }}/python-client/.gitlab-ci.yml
        rm -rf ${{ github.workspace }}/python-client/.travis.yml
        rm -rf ${{ github.workspace }}/python-client/git_push.sh
        rm -rf ${{ github.workspace }}/python-client/rename_generated_code.py
        rm -rf ${{ github.workspace }}/python-client/create_doc.py
        rm -rf ${{ github.workspace }}/python-client/setup.cfg
        rm -rf ${{ github.workspace }}/python-client/setup.py
        ls ${{ github.workspace }}/python-client
      shell: bash

    - name: "Install black and isort and use it to format code"
      run: |
        pip install black isort
        black ${{ github.workspace }}/python-client/
        isort  --profile black ${{ github.workspace }}/python-client/
      shell: bash

    - name: "Add and Commit files"
      run: |
        git status
        git pull
        git config --local user.email "bundesAPI@users.noreply.github.com"
        git config --local user.name "bundesbot"
        git add ${{ github.workspace }}/python-client
        git commit --allow-empty -m "Generate client from current OpenAPI spec" -a
      shell: bash
      if: ${{ inputs.commit-to-git == 'true' }}

    - name: "Push changes"
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ github.token }}
        branch: ${{ github.ref }}
      if: ${{ inputs.commit-to-git == 'true' }}

    - name: "Install pypa/build and twine for uploading"
      run: >-
        python -m
        pip install
        build twine
        --user
      shell: bash

    - name: "Build a binary wheel and a source tarball using build module"
      run: |
        cd ${{ github.workspace }}/python-client
        python -m build --sdist --wheel --outdir dist/
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: "postprocessed-code"
        path: ${{ github.workspace }}/python-client # or path/to/artifact

    # Upload to TestPyPI
    - name: Upload to TestPyPI using twine
      run: |
        cd ${{ github.workspace }}/python-client
        python -m twine upload --skip-existing dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.testpypi-token }}
        TWINE_REPOSITORY: testpypi
      shell: bash
      if: ${{ inputs.upload-to-testpypi == 'true'  && github.ref == 'refs/heads/main' }}

    - name: Print upload skip to test pypi
      run: |
        echo "Skip upload to testpypi due to input upload-to-testpypi set to false or not on main branch"
      shell: bash
      if: ${{ inputs.upload-to-testpypi == 'false' || github.ref != 'refs/heads/main'}}

    # Upload to PyPI
    - name: Upload to TestPyPI using twine
      run: |
        cd ${{ github.workspace }}/python-client
        python -m twine upload --skip-existing dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.pypi-token }}
        TWINE_REPOSITORY: pypi
      shell: bash
      if: ${{ inputs.upload-to-pypi == 'true' && github.ref == 'refs/heads/main' }}

    - name: Print upload skip to pypi
      run: |
        echo "Skip upload to Pypi due to input upload-to-pypi set to false or not on main branch"
      shell: bash
      if: ${{ inputs.upload-to-pypi == 'false' || github.ref != 'refs/heads/main'}}
